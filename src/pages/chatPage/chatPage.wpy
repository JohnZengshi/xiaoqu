<template>
  <view class="section">
    <SectionBox :syncChatBox.sync="chatBox"></SectionBox>
    <BottomPack :syncTemp.sync="temp"></BottomPack>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import Api from '../../api/api';
  import 'wepy-async-function';
  import Tip from '../../utils/tip';
  import {
    toDecimal2,
    timeImg,
  } from '../../utils/util';
  import {
    getLocation,
    calling,
  } from '../../utils/wxCommen';
  import SectionBox from '../../components/chatPage/sectionBox';
  import BottomPack from '../../components/chatPage/bottomPack';
  export default class chatPage extends wepy.page {
    config = {
      navigationBarTitleText: '松鼠邻家',
    };
    components = {
      SectionBox,
      BottomPack,
    };
    // 页面数据层
    data = {
      // 问候语计时器
      greetings: null,
      // 是否发问候语
      isGreet: false,
      // 问候语规则
      greetingsWord: null,
      // 粘贴板
      clipboard: null,
      // 聊天记录
      ChatRecord: null,
      // 选项的显示隐藏
      temp: false,
      // 聊天内容（传给子组件）
      chatBox: [],
    };
    methods = {};
    watch = {
      temp(newValue, oldValue) {
        console.log(`num value: ${oldValue} -> ${newValue}`)
      }
    };
    // 页面初始化
    onLoad() {
      // 登录
      (new(this.login())).wxLogin((res) => {
        // console.log(this)
        let userInfo = res;
        // 设置全局变量
        this.$parent.globalData.userInfo = res;
        // 显示选项按钮                
        this.temp = res.temp;
        this.$apply();
        // 聊天记录
        this.ChatRecord = new(this.ChatRecordSystem())(userInfo);
        // 设置计时器
        this.greetings = new(timeImg())(120, 1000);
        // 设置问候语规则
        this.greetingsWord = new(this.gettingWord())();
        // 设置粘贴板
        this.clipboard = new(this.getClipboard())(userInfo);
        // 获取聊天记录
        this.ChatRecord._ObtainChatRecord((res) => {
          console.log(res);
          this.chatBox = res;
          this.$apply();
        });
        // 获取粘贴板并处理
        this.disposeClipboard();
      });
      console.log("...底部发送框和其他按钮组件...")
    };
    // 每次页面进入
    onShow() {
      // 清除打招呼计时器
      if (this.greetings) this.greetings.clearTime();
      // 发问候语
      if (this.isGreet) this.greetingsWord.radomWord((res) => {
        // console.log(res)
        this.popup(500, {
          content: [res],
          type: 'ai',
          ctime: new Date().getTime(),
          class: "aiWord",
        });
        this.popup(1000, {
          content: ["有什么需要的，小松果一直都在。"],
          type: 'ai',
          ctime: new Date().getTime(),
          class: "aiWord",
        });
        this.isGreet = false;
      });
      // 获取粘贴板并处理
      this.disposeClipboard();
    };
    // 页面隐藏
    onHide() {
      // 开始问候语计时
      if (this.greetings) this.greetings.setTime(() => {
        console.log("发问候语")
        this.isGreet = true;
      });
      // 上传用户聊天记录
      if (this.ChatRecord) this.ChatRecord._uploadChatRecord(this.chatBox);
    };
    // computed = {};
    // events = {};
    // 登录
    login() {
      return class userLogin {
        constructor() {
          this.strs = [];
          this.userInfo = null;
          this.callback = null;
        };
        // 弹出确认框
        showModal(callback = function() {}) {
          wx.showModal({
            title: '警告',
            content: '您点击了拒绝授权,将无法正常显示个人信息,点击确定重新获取授权。',
            success: (res) => {
              // 用户确认
              if (res.confirm) {
                wx.openSetting({
                  success: (res) => {
                    // 用户已经授权
                    if (res.authSetting["scope.userInfo"]) {
                      this.wxLogin((res) => {
                        console.log(this.callback)
                        this.callback(res)
                      })
                    }
                    // 用户还没授权
                    else {
                      this.showModal();
                    }
                  }
                });
              }
              // 用户拒绝
              else {
                this.showModal();
              }
            }
          })
        }
        // 获取用户信息
        getUserInfo(code, callback = function() {}) {
          wx.getUserInfo({
            success: async(data) => {
              var data = {
                code: code,
                userInfo: JSON.stringify(data.userInfo),
                encryptedData: data.encryptedData,
                iv: data.iv,
                temp: 1
              }
              // 登录
              let res = await Api.login({
                query: data,
                method: "POST"
              })
              this.userInfo = res.data.data;
              callback(this.userInfo)
            },
            fail: (res) => {
              console.log("获取用户信息失败");
              this.callback = callback;
              this.showModal();
            }
          })
        }
        // 获取登录code
        wxLogin(callback = function() {}) {
          wx.login({
            success: (res) => {
              if (res.code) {
                let code = res.code;
                this.getUserInfo(code, callback);
              } else {
                app._showtoast('获取不到用户code', "none");
                return false;
              }
            }
          })
        };
      }
    };
    // 聊天上传下载系统
    ChatRecordSystem() {
      return class ChatRecord {
        constructor(userInfo) {
          this.chattingBranches = 0;
          this.param = {
            pid: userInfo.pid,
            uid: userInfo.id,
            usersay: "" || null,
          };
          this.userChatRecord = null;
          // 获取历史记录次数
          this.time = 0;
          // 全部的聊天记录
          this.allChat = [];
          // 是否可以继续获取聊天记录
          this.flag = true;
        };
        // 上传聊天记录
        async _uploadChatRecord(chatBox) {
          let usersay = chatBox.slice();
          let usersayLen = usersay.length;
          // console.log(usersayLen)
          // console.log(this.chattingBranches)
          if (usersayLen == this.chattingBranches) {
            console.log("没有新的聊天记录上传")
          } else {
            this.param.usersay = JSON.stringify(usersay.splice(this.chattingBranches, usersayLen - this.chattingBranches));
            let res = await Api.uploadUserChat({
              query: this.param,
              method: "POST"
            });
            console.log("上传新的聊天记录");
            console.log(res);
            this.chattingBranches = usersayLen;
          }
        }
        // 获取聊天记录
        async _ObtainChatRecord(callback = function() {}) {
          let res = await Api.downloadUserChat({
            query: this.param,
            method: "POST",
          });
          console.log(res);
          this.allChat = res.data.data;
          if (res.data.error == "ok") {
            this.userChatRecord = JSON.parse(res.data.data[0].usersay);
            this.chattingBranches = JSON.parse(res.data.data[0].usersay).length;
            this.time++;
            callback(this.userChatRecord);
          } else {
            callback(false);
          }
        }
        // 加载更多聊天记录
        loadMore(callback = function() {}) {
          console.log("加载更多聊天记录。。。");
          // console.log(this.allChat);
          if (this.allChat.length == this.time) this.flag = false;
          if (this.flag) {
            this.userChatRecord = JSON.parse(this.allChat[this.time].usersay);
            this.time++;
            console.log(this.userChatRecord);
            callback(true);
          } else {
            callback(false);
          }
        }
      }
    };
    // 问候语
    gettingWord() {
      return class gettingWord {
        constructor() {
          this.word = "";
          this.flag = true;
          this.getTutorialsTime = 1;
        };
        async getWelmsg(callback = function() {}) {
          let res = await Api.getWelmsg({
            query: "",
            method: "GET"
          })
          var msg = res.data.data;
          msg = msg.replace('小优', '小松果');
          this.word = msg;
          callback(this.word);
        };
        async getTutorials(callback = function() {}) {
          let data = {
            id: this.getTutorialsTime,
          }
          let res = await Api.getTutorials({
            query: data,
            method: "POST"
          });
          this.word = res.data.data;
          callback(this.word)
          if (this.getTutorialsTime == 5) return this.getTutorialsTime = 1
          this.getTutorialsTime++;
        };
        radomWord(callback = function() {}) {
          if (this.flag) {
            this.getWelmsg(callback);
            this.flag = false
          } else {
            this.getTutorials(callback);
            this.flag = true
          }
        };
      }
    };
    // 用户粘贴板
    getClipboard() {
      return class clipboard {
        constructor(userInfo) {
          this.key = " ";
          this.responseData = null;
          this.userInfo = userInfo;
        };
        // 获取粘贴板内容
        getClipboard(callback = function() {}) {
          wx.getClipboardData({
            success: (res) => {
              this.key = res.data;
              if (this.key.indexOf("￥") != -1 && this.key.lastIndexOf("￥") != -1) {
                callback(this.key);
              }
            }
          })
        };
        // 请求内容
        async request(callback = function() {}) {
          let data = {
            keyword: this.key,
            pid: this.userInfo.pid,
            uid: this.userInfo.id,
          };
          let res = await Api.getClipboardData({
            query: data,
            method: "POST"
          })
          if (res.data.error == "ok") {
            this.responseData = res.data.data;
            await callback(this.responseData);
            // 清空剪贴板
            wx.setClipboardData({
              data: ' '
            })
          } else {}
        };
      };
    };
    // 粘贴板的内容处理
    disposeClipboard() {
      if (this.clipboard) this.clipboard.getClipboard((res) => {
        this.clipboard.request((res) => {
          let keywordtype = res.keywordtype
          let data = res.data.data.data
          // 淘口令
          if (keywordtype == 5) {
            this.popup(0, {
              content: ["检测到剪贴板有淘口令"],
              type: "ai",
              ctime: new Date().getTime(),
              class: "aiWord"
            });
            //优惠券有数据
            if (data) {
              this.renderCoupon(data);
            }
            // 优惠券没数据
            else {
              this.popup(500, {
                content: ["没有优惠券！"],
                type: "ai",
                ctime: new Date().getTime(),
                class: "aiWord"
              });
            }
          }
        })
      })
      else {
        return;
      }
    };
    // 渲染优惠券
    renderCoupon(data) {
      if (data.length > 0) {
        var n = parseInt(Math.random() * 10); //随机数 
        data = data[n]; //循环
      }
      // 当前价
      const currentPirce = data.discountprice - data.ulanprice;
      // 优惠券面额
      const ulanprice = data.ulanprice
      // 返利金额
      const commission = data.commission;
      // 优惠券状态
      const couponStatus = data.couponStatus;
      // 商品查询历史价格的nid
      const nid = data.nid;
      // 原价
      const oldprice = data.oldprice
      // 历史价格
      var pirce = [];
      data.pic = data.pic.replace('75x75', '150x150');
      var pic = data.pic;
      if (pic.substring(0, 2) == '//') {
        data.pic = 'https:' + data.pic;
      }
      // 原价
      data.oldprice = toDecimal2(oldprice);
      // 优惠金额
      data.ulanprice != "" ? data.ulanprice = parseInt(ulanprice) || data.couponcount : ulanprice;
      // 券后价
      data.newpirce = toDecimal2(oldprice - ulanprice) || data.price;
      if (data.discountprice == undefined) {
        data.discountprice = data.oldprice;
      }
      if (data.newpirce == undefined) {
        data.newpirce = toDecimal2(data.discountprice - data.ulanprice);
      }
      // 有券有返利 
      if (data.ulanprice != '' && data.commission > 0) {
        data.couponStatus = "botn_money_coupon"
      }
      // 有券没返利
      else if (data.ulanprice != '' && data.commission == 0) {
        data.couponStatus = "coupon_no_money"
      }
      // 没券有返利
      else if (data.ulanprice == "" && data.commission > 0) {
        data.couponStatus = "money_no_coupon"
      }
      // 标签 
      data.type = "coupon";
      // 样式
      data.class = "couponCard";
      data.couponStatus = "coupon_no_money"
      //优惠券没数据
      if (data.length == 0) {
        this.popup(0, {
          content: [this.strs[3]],
          type: "ai",
          ctime: new Date().getTime(),
          class: "aiWord"
        });
        return;
      }
      // 优惠券有数据
      else {
        this.popup(500, {
          content: ["主人，打开淘宝、天猫客户端，找到喜欢的商品，复制商品链接（淘口令）。回到微信打开松鼠邻家小程序，小松果自动帮您找优惠哦~"],
          type: "ai",
          ctime: new Date().getTime(),
          class: "aiWord"
        });
        this.popup(1000, {
          content: ["主人，先看看这张优惠券，还不错哦~"],
          type: "ai",
          ctime: new Date().getTime(),
          class: "aiWord"
        });
        data.ctime = new Date().getTime()
        this.popup(1500, data);
      }
    };
  };
</script>
<style lang="less">
  /* 首页进入部分 */
  .section {
    height: 100%;
    overflow: hidden;
    padding: 0 28rpx;
    background-color: #f5f5f6;
    border-top: 1px solid #ddd;
    box-sizing: border-box; // 上拉加载的动画
  }
</style>
